# fly.toml app configuration file
# For a backend-only Python/Flask application

app = 'spotify-mood-player-backend' # IMPORTANT: Use your actual Fly.io app name here
primary_region = 'lax' # Or your preferred Fly.io region

[build]
  dockerfile = "Dockerfile" # Points to the Dockerfile in your project root

# Define environment variables available at runtime for your backend.
# Sensitive values (API keys, secrets) MUST be set using `fly secrets set VAR_NAME="VALUE"`
# Do NOT commit secrets directly into this file.
[env]
  PORT = "5001" # The port your Gunicorn server will listen on inside the container. This is used by the CMD in Dockerfile.
  FLASK_ENV = "production"
  # PYTHONUNBUFFERED = "1" # Already set in Dockerfile
  # PYTHONDONTWRITEBYTECODE = "1" # Already set in Dockerfile

  # Frontend URL for CORS configuration in your Flask app.
  # !!! REPLACE THIS with the actual URL of your Vercel-deployed frontend !!!
  FRONTEND_URL = "https://your-vercel-frontend-url.vercel.app" 

  # Spotify API Credentials - SET THESE AS SECRETS via `fly secrets set`
  # Example: SPOTIPY_CLIENT_ID
  # Example: SPOTIPY_CLIENT_SECRET
  
  # Spotify Redirect URI - SET AS SECRET or ensure it's correct for your Fly app
  # It should be your Fly.io backend's public URL + /api/callback
  # Example: SPOTIPY_REDIRECT_URI = "https://spotify-mood-player-backend.fly.dev/api/callback" 
  
  # Flask Secret Key - SET THIS AS A SECRET via `fly secrets set`
  # Example: FLASK_SECRET_KEY

[[services]]
  internal_port = 5001 # This MUST match the port Gunicorn (and your [env].PORT) is configured to use inside the container.
  protocol = "tcp"
  processes = ["app"] # This refers to the CMD in your Dockerfile.

  # HTTP health check for your Flask application.
  # Your Flask app should have an endpoint at this path that returns a 2xx status.
  [[services.http_checks]]
    interval = "15s"    # How often to check health.
    timeout = "5s"      # How long to wait for a response.
    grace_period = "20s" # How long to wait after a machine starts before performing the first check. Increase if your app starts slowly.
    method = "GET"
    path = "/api/health" # IMPORTANT: Ensure your Flask app has this endpoint.
    # For example, in backend/app.py:
    # @app.route('/api/health', methods=['GET'])
    # def health_check():
    #     return jsonify({"status": "healthy"}), 200

  # Public-facing ports that route traffic to your service's internal_port.
  [[services.ports]]
    handlers = ["http"]
    port = 80 # External HTTP port
    force_https = true # Redirect HTTP to HTTPS

  [[services.ports]]
    handlers = ["tls", "http"] # Handles HTTPS termination and also HTTP for the forced redirect.
    port = 443 # External HTTPS port

# Optional: Define machine size. Adjust based on your application's needs.
[vm]
  memory = "1gb" 
  cpu_kind = "shared"
  cpus = 1
  memory_mb = 1024